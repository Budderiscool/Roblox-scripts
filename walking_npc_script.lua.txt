local npc = script.Parent
local humanoid = npc:WaitForChild("Humanoid")
local hrp = npc:WaitForChild("HumanoidRootPart")

local jobPart = workspace:WaitForChild("JobPart")
local homePart = workspace:WaitForChild("HomePart")

local PathfindingService = game:GetService("PathfindingService")
local Lighting = game:GetService("Lighting")

local jobStart = 9 * 60    -- 9:00 AM
local jobEnd = 17 * 60     -- 5:00 PM

local currentTarget = nil
local moving = false
local REACH_THRESHOLD = 4 -- studs to consider “arrived”
local STUCK_CHECK_INTERVAL = 3 -- seconds
local STUCK_DISTANCE_THRESHOLD = 2 -- how much he needs to move to NOT be stuck

local lastPosition = hrp.Position
local lastCheckTime = tick()

local function createPath(startPos, endPos)
	local path = PathfindingService:CreatePath({
		AgentRadius = 2,
		AgentHeight = 5,
		AgentCanJump = true,
		AgentJumpHeight = 10,
		AgentCanClimb = true,
	})
	path:ComputeAsync(startPos, endPos)
	return path
end

local function followPath(target)
	moving = true
	while currentTarget == target do
		local distToTarget = (hrp.Position - target.Position).Magnitude
		if distToTarget <= REACH_THRESHOLD then
			-- Arrived!
			humanoid:MoveTo(hrp.Position)
			task.wait(1)
			-- Continue checking if moved away
		else
			local path = createPath(hrp.Position, target.Position)

			if path.Status == Enum.PathStatus.Success then
				for _, waypoint in ipairs(path:GetWaypoints()) do
					if currentTarget ~= target then break end

					if waypoint.Action == Enum.PathWaypointAction.Jump then
						humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
					end

					humanoid:MoveTo(waypoint.Position)

					local reached = humanoid.MoveToFinished:Wait()
					if not reached then
						warn("Stuck or interrupted — recalculating path...")
						break
					end
				end
			else
				warn("No path found — retrying...")
			end
		end

		-- Check if stuck (haven't moved much)
		if tick() - lastCheckTime > STUCK_CHECK_INTERVAL then
			local movedDist = (hrp.Position - lastPosition).Magnitude
			if movedDist < STUCK_DISTANCE_THRESHOLD then
				warn("NPC might be stuck, retrying path...")
			end
			lastPosition = hrp.Position
			lastCheckTime = tick()
		end

		task.wait(1)
	end
	moving = false
end

while true do
	local currentTime = Lighting:GetMinutesAfterMidnight()
	local target

	if currentTime >= jobStart and currentTime < jobEnd then
		target = jobPart
	else
		target = homePart
	end

	if target ~= currentTarget then
		currentTarget = target
		if not moving then
			task.spawn(function()
				followPath(target)
			end)
		end
	end

	task.wait(1)
end
