local npc = script.Parent
local humanoid = npc:WaitForChild("Humanoid")
local hrp = npc:WaitForChild("HumanoidRootPart")
local Lighting = game:GetService("Lighting")
local PathfindingService = game:GetService("PathfindingService")

local npcPointsFolder = workspace:WaitForChild("NPCPoints")
local jobSitesFolder = workspace:WaitForChild("JobSites")
local assignedJob = npc:WaitForChild("AssignedJob")

local npcPoints = npcPointsFolder:GetChildren()
table.sort(npcPoints, function(a, b) return a.Position.X < b.Position.X end)

local function moveToPosition(position)
	local path = PathfindingService:CreatePath()
	path:ComputeAsync(hrp.Position, position)

	if path.Status == Enum.PathStatus.Success then
		for _, waypoint in ipairs(path:GetWaypoints()) do
			if waypoint.Action == Enum.PathWaypointAction.Jump then
				humanoid.Jump = true
			end
			humanoid:MoveTo(waypoint.Position)
			local reached = humanoid.MoveToFinished:Wait()
			if not reached then return false end
		end
		return true
	else
		warn("Path failed for NPC:", npc.Name)
		return false
	end
end

local function walkPathOut()
	for _, point in ipairs(npcPoints) do
		if not moveToPosition(point.Position) then break end
	end
end

local function walkPathBack()
	for i = #npcPoints, 1, -1 do
		if not moveToPosition(npcPoints[i].Position) then break end
	end
end

local function goToJob()
	local jobPart = jobSitesFolder:FindFirstChild(assignedJob.Value)
	if jobPart then
		moveToPosition(jobPart.Position)
	else
		warn("Job site not found for:", assignedJob.Value)
	end
end

local isOutside = false

while true do
	wait(1)
	local hour = math.floor((Lighting.ClockTime + 0.01) % 24)

	if hour >= 9 and hour < 21 then
		if isOutside then
			walkPathBack()
			isOutside = false
		end
		goToJob()
	else
		if not isOutside then
			walkPathOut()
			isOutside = true
		end
	end
end
